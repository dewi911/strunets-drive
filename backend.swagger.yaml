openapi: 3.0.0
info:
  title: File Storage API
  description: API for managing file storage, authentication, and file operations
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          example: "Error message"

    LoginInput:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "john.doe"
        password:
          type: string
          format: password
          example: "secretpassword"

    SignUpInput:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: "john.doe"
        password:
          type: string
          format: password
          example: "secretpassword"
        email:
          type: string
          format: email
          example: "john@example.com"

    File:
      type: object
      properties:
        id:
          type: string
          example: "edd2013f-3a5a-474c-b239-143e29e5ef4f"
        name:
          type: string
          example: "document.pdf"
        path:
          type: string
          example: "username/folder-id/file-id"
        size:
          type: integer
          format: int64
          example: 1048576
        username:
          type: string
          example: "john.doe"
        uploadedAt:
          type: string
          format: date-time
        isDir:
          type: boolean
          example: false
        folderId:
          type: string
          example: "folder-uuid-123"

    Folder:
      type: object
      properties:
        id:
          type: string
          example: "folder-uuid-123"
        name:
          type: string
          example: "Documents"
        parentId:
          type: string
          example: "parent-folder-uuid"
        username:
          type: string
          example: "john.doe"
        createdAt:
          type: string
          format: date-time
        pathArray:
          type: array
          items:
            type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/File'
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: "john.doe"
        createdAt:
          type: string
          format: date-time

paths:
  /auth/sign-up:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpInput'
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User successfully registered"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIs..."
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    get:
      tags:
        - Authentication
      summary: Refresh access token
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIs..."
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files:
    post:
      tags:
        - Files
      summary: Upload a file
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                folderID:
                  type: string
                  description: Optional folder ID to upload file to
      responses:
        '201':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File uploaded successfully"
                  file:
                    $ref: '#/components/schemas/File'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Files
      summary: List all files
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/File'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}:
    get:
      tags:
        - Files
      summary: Download a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File content
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Files
      summary: Update file metadata
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New file name
                tags:
                  type: array
                  items:
                    type: string
                  description: Optional tags for the file
      responses:
        '200':
          description: File metadata updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Files
      summary: Delete a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "File deleted successfully"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /files/{id}/copy:
    post:
      tags:
        - Files
      summary: Copy a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newFileName:
                  type: string
                  description: Optional new file name for the copied file
      responses:
        '200':
          description: File copied successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'

  /files/{id}/move:
    put:
      tags:
        - Files
      summary: Move a file
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                destinationPath:
                  type: string
                  description: Destination path or folder ID
      responses:
        '200':
          description: File moved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'

  /files/{id}/info:
    get:
      tags:
        - Files
      summary: Get file information
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: File information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/File'

  /folders:
    post:
      tags:
        - Folders
      summary: Create a new folder
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Folder name
                parentId:
                  type: string
                  description: Optional parent folder ID
      responses:
        '201':
          description: Folder created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'

  /folders/{id}:
    get:
      tags:
        - Folders
      summary: Get folder contents
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Folder contents
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'

  /folders/{id}/download:
    get:
      tags:
        - Folders
      summary: Download folder as ZIP
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Folder downloaded as ZIP
          content:
            application/zip:
              schema:
                type: string
                format: binary

  /folders/hierarchy:
    get:
      tags:
        - Folders
      summary: Get user's folder hierarchy
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Folder hierarchy retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /folders/complete:
    get:
      tags:
        - Folders
      summary: Get complete folder and file hierarchy for the user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Complete hierarchy retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Folder'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /folders/upload-structure:
    post:
      tags:
        - Folders
      summary: Upload multiple files with nested folder structure
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  items:
                    type: string
                    format: binary
                parent_folder_id:
                  type: string
                  description: Optional parent folder ID for upload
      responses:
        '201':
          description: Files uploaded with nested folder structure
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploaded_files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  errors:
                    type: array
                    items:
                      type: string
        '206':
          description: Partial content - some files uploaded with errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploaded_files:
                    type: array
                    items:
                      $ref: '#/components/schemas/File'
                  errors:
                    type: array
                    items:
                      type: string